generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model parking_area {
  id                    Int                 @id @default(autoincrement())
  address               String
  zip_code              String
  station               String
  landmark              String
  two_wheeler_capacity  Int
  four_wheeler_capacity Int
  two_wheeler_rate      Int
  four_wheeler_rate     Int
  total_parking_area    Int?
  agreement_doc         String?
  ulb_id                Int                 @default(2)
  type_parking_space    type_parking_space?
  created_at            DateTime            @default(now()) @map("created_at")
  updated_at            DateTime            @updatedAt @map("updated_at")
  receipts              receipts[]
  accounts_summary      accounts_summary[]
}

model parking_incharge {
  id               Int                @id @default(autoincrement())
  first_name       String
  middle_name      String?
  last_name        String
  age              String
  blood_grp        String
  mobile_no        String
  emergency_mob_no String?
  address          String?
  email_id         String?
  cunique_id       String             @unique @db.VarChar
  kyc_doc          String?
  fitness_doc      String?
  zip_code         String?
  ulb_id           Int                @default(2)
  created_at       DateTime           @default(now()) @map("created_at")
  updated_at       DateTime           @updatedAt @map("updated_at")
  receipts         receipts[]
  accounts_summary accounts_summary[]
}

model scheduler {
  id               Int                @id @default(autoincrement())
  incharge_id      String[]
  location_id      Int?
  from_date        DateTime           @db.Date
  to_date          DateTime           @db.Date
  from_time        String?
  to_time          String?
  extended_hours   Json?              @default("[]") // Store previous to_time values as JSON array
  is_scheduled      Boolean            @default(true)
  ulb_id           Int                @default(2)
  created_at       DateTime           @default(now()) @map("created_at")
  updated_at       DateTime           @updatedAt @map("updated_at")
  receipts         receipts[]
  accounts_summary accounts_summary[]
}


enum type_parking_space {
  Organized
  UnOrganized
}

model receipts {
  id                 Int                 @id @default(autoincrement())
  incharge_id        String
  parking_incharge   parking_incharge    @relation(fields: [incharge_id], references: [cunique_id])
  area_id            Int
  area               parking_area        @relation(fields: [area_id], references: [id])
  vehicle_type       vehicle_type
  type_parking_space type_parking_space?
  vehicle_no         String?
  amount             Int?
  receipt_no         String              @unique
  date               DateTime            @db.Date
  in_time            String
  out_time           String?
  ulb_id             Int                 @default(2)
  is_paid            Boolean             @default(false)
  payment_mode       String?
  transaction_id     String?
  is_validated       Boolean             @default(false)
  schedule           scheduler?          @relation(fields: [scheduler_id], references: [id])
  scheduler_id       Int?
  transaction        accounts_summary?   @relation(fields: [transaction_id], references: [transaction_id])
  created_at         DateTime            @default(now()) @map("created_at")
  updated_at         DateTime            @updatedAt @map("updated_at")
}

enum vehicle_type {
  two_wheeler
  four_wheeler
}

model accounts_summary {
  incharge_id      String
  transaction_id   String           @id @unique
  receipts         receipts[]
  total_amount     Int
  date             DateTime         @default(now())
  description      String
  transaction_type String
  area_id          Int
  area             parking_area     @relation(fields: [area_id], references: [id])
  status           Int?             @default(0) //0=pending, 1=verified
  ulb_id           Int              @default(2)
  schedule         scheduler?       @relation(fields: [scheduler_id], references: [id])
  scheduler_id     Int?
  is_verified      Boolean          @default(false)
  created_at       DateTime         @default(now()) @map("created_at")
  updated_at       DateTime         @updatedAt
  incharge         parking_incharge @relation(fields: [incharge_id], references: [cunique_id])
}
